{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block content %}

{% apply markdown_to_html %}
# Introduktion

## De fyra C:na

### Code duplication
Kodduplikation är när samma eller väldigt lik kod finns på flera ställen. Det här kan hända då man till exempel inte har tid att skriva en funktion som klarar av flera olika användningar, och då skapar två väldigt lika funktioner till två olika användningsområden. Jag har gjort detta i en tidigare kurs (har för mig att det var JavaScriptkursen), då jag inte hann med att fixa en bättre funktion och då hade två stora funktioner som utförde ett väldigt lika arbete. Den dubblerade koden tar inte bara upp extra utrymme, utan kan också leda till att programmet blir svårare att uppdatera och ta hand om. I koden för det här projektet så hittade Scrutinizer ingen duplikation.

### Cohesion
Cohesion handlar om hur väl "grupperad" koden är. Ligger funktioner som har med varandra att göra i samma klass? Om lika saker ligger i samma modul och/eller klass så blir det enklare att hålla rätt på vad som är vad/vart. Det kan göra det enklare att uppdatera delar av koden, och att återanvända den. Om man till exempel har hög kohesion så vet man vart man ska leta efter/placera kod, men om man istället har låg kohesion (saker ligger lite varstans) så är det svårare att ha en bra överblick och risken för duplicerad kod ökar. LCOM står för Lack of Cohesion of Methods, alltså att metoderna saknar kohesion. Är den hög så kan det bli svårare att underhålla koden. LCOM bör vara så nära 1 som möjligt, och phpmetrics säger att koden ligger på 1,07 i medelvärde. Klasserna går från 0 till 2.

### Coupling
Koppling mellan olika delar av koden kan jämföras med kohesion, fast åt andra hållet. Om man har en låg koppling mellan olika delar av koden så lär de individuella delarna som hör ihop ligga i rätt "grupp", alltså lär koden ha hög kohesion. Om kopplingen däremot är hög så lär det betyda att olika delar av koden kallar på varandra hela tiden, de är tätt kopplade, alltså lär de inte ligga rätt grupperade och man får en låg kohesion. I den här koden så ligger värdet mellan 0 till 4, vilket jag tycker är lagom. Den klass som har högst kopplingsvärde är Deck, då den blir kallad på av 4 olika klasser som behöver instanser av den som objekt. Den klass som kallar på flest andra klasser är CardController, som då renderar olika sidor och på grund av det behöver kunna nå alla olika kort-relaterade klasser. Den kallar på 9 olika klasser.

### Cyclomatic complexity
Cyclomatisk komplexitet handlar om hur komplex koden är. Hur många val och vägar finns det? Ju mindre komplex koden är desto bättre lär den vara. Har man en hög komplexitet borde man kanske försöka dela upp den funktionen i flera mindre komplexa delar. Det påminner mig om en tidigare uppgift i en annan kurs, där lintern sa nej till att ha fler än 12 if-satser i en funktion. Just då förstod jag inte varför jag inte kunde ha så många, men nu vet jag att det finns flera sätt att lösa den situationen på. Det hela löstes genom att bryta upp funktionen till flera små. För det här projektet så ligger komplexiteten mellan 1 och 15, men de flesta klasser ligger på 1 till 6 med ett medelvärde på är 3,43. En klass (CardController) ligger på 15, då den behöver rendera flera olika sidor.


# Phpmetrics
#### Storlek
Phpmetrics rapport visar att koden är lite väl stor på vissa ställen. Det vore bra att försöka dela upp eller reducera delar av till exempel CardController och LibraryController. LibraryController innehåller kod som skulle kunna vara funktioner i sin egna fil och klass. CardController skulle behövas delas upp i två, kanske en fil/klass för själva spelet och en annan för allt det andra som har med korten att göra? Ungefär en tredjedel av allt skrivet är kommentarer.

#### Kodduplikation
Ingen duplikation verkar hittas av phpmetrics. Det finns alltså ingen uppenbar bit av kod som skulle kunna återanvändas istället för att finnas på flera ställen.

#### Kohesion
Kohesionen i koden ser ut att vara ganska hög, då LCOM (Lack of Cohesion of Methods) är låg. Värdet ligger på 1,07, där "målet" är 1. De individuella värdena för klasserna ligger mellan 0 och 2.

#### Koppling
Kopplingen mellan de olika klasserna är ganska låg. Deck är den klass som blir kallad på oftast, och den blir endast kallad på fyra gånger. CardController kallar på flest olika klasser, och den kallar på 9 olika klasser. Trots att det ser bra ut så skulle man möjligen kunna få det lite bättre om man skulle dela upp CardController till två olika klasser.

#### Komplexitet
Som tidigare påpekat så finns det vissa klasser med en lite för hög komplexitet. Speciellt CardController har en medelhög komplexitet då den ligger på 15. Det skulle möjligtvis kunna fixas genom att dela upp kontrollern i två olika filer, en för spelet och en för alla andra sidor så som kort och kortlek. Alla andra klasser ser bra ut och ligger på 1 till 6 i komplexitet, med ett medelvärde på 3,43. Även LibraryController är lite väl komplex då den har mycket kod som skulle kunna ligga i sin egna klass och fil som funktioner. Genom att dra ner på komplexiteten för dessa klasser så skulle man även få ner Average relative System complexity en hel del.


# Scrutinizer

#### Kodduplikation
Ingen duplikation hittades av Scrutinizer.

#### Kohesion

#### Koppling

#### Komplexitet
Scrutinizer ger en högre komplexitet än vad phpmetrics gjorde. Här får CardController 19 i komplexitet, istället för 15. Men utanför den och LibraryController och Game så håller sig komplexiteten ganska låg. Det skulle vara bra att få ner deras komplexitet lite, möjligen genom metoderna som beskrivs i samma del av phpmetrics. PlayProcess (metod) borde också ses över då den har en högre komplexitet.

#### Täckning
Testen som jag har skrivit täcker endast de filer som ligger i Card, alltså funktionerna för kortleken och allt som tillhör. För det som har test så är täckningen hög, med allt på 100% förutom Game, som har en if-sats som drar ner det till ca 93%. Det skulle gå att höja täckningen genom att skriva tester för kontrollerna, och genom att se om det finns ett sätt att få if-satsen i Game att kunna täckas 100%. Just nu så har src mappen en total täckning på ca 24%.


# Förbättringar
De tre förbättringar jag tänker implementera är:
    1. Fixa alla "gramatiska" fel. Till exempel == istället för ===, {} på fel rader, etc.
    2. Försök få ner komplexiteten genom att dela upp CardController i två.
    3. Skriv tester för hela eller delar av Controllers.

Med dessa förbättringar hoppas jag få ner antalet "buggar" som Scrutinizer hittar, få ner komplexiteten så att mätvärdena blir bättre, och få upp coverage till grönt i Scrutinizer.

#### Implementation
Efter implementation så gick antalet "buggar" ner till 1 (tidigare 5). Den bugg som är kvar ligger i en fil som jag inte vill röra (autogenererad). Delningen av CardController till GameController gick bra och drog ner komplexiteten till


    Implementera sedan förbättringarna.
    Analysera därefter rapporterna från phpmetrics och Scrutinizer och notera de nya mätvärdena.
    Gör det tydligt hur mätvärdena såg ut innan och efter dina förbättringar.


# Diskussion
Avsluta med ett stycke “Diskussion” där du diskuterar kort kring det du nyss gjort. Kan man aktivt jobba med kodkvalitet på detta sättet? Finns det fördelar och kanske nackdelar?
{% endapply %}

{% endblock %}
