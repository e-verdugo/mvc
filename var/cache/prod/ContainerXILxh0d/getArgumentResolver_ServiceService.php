<?php

namespace ContainerXILxh0d;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getArgumentResolver_ServiceService extends App_KernelProdContainer
{
    /*
     * Gets the private 'argument_resolver.service' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['argument_resolver.service'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Controller\\LibraryController::createBookProcess' => ['privates', '.service_locator.GQZbvNR', 'get_ServiceLocator_GQZbvNRService', true],
            'App\\Controller\\LibraryController::deleteBookByIsbnProcess' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'App\\Controller\\LibraryController::showAllBooks' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController::showBookByIsbnProcess' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController::updateBook' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController::updateBookProcess' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'App\\Kernel::loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'App\\Kernel::registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'App\\Kernel::terminate' => ['privates', '.service_locator.bRdave9', 'get_ServiceLocator_BRdave9Service', true],
            'kernel::loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel::registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel::terminate' => ['privates', '.service_locator.bRdave9', 'get_ServiceLocator_BRdave9Service', true],
            'App\\Controller\\LibraryController:createBookProcess' => ['privates', '.service_locator.GQZbvNR', 'get_ServiceLocator_GQZbvNRService', true],
            'App\\Controller\\LibraryController:deleteBookByIsbnProcess' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'App\\Controller\\LibraryController:showAllBooks' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController:showBookByIsbnProcess' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController:updateBook' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController:updateBookProcess' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'kernel:loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel:registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel:terminate' => ['privates', '.service_locator.bRdave9', 'get_ServiceLocator_BRdave9Service', true],
        ], [
            'App\\Controller\\LibraryController::createBookProcess' => '?',
            'App\\Controller\\LibraryController::deleteBookByIsbnProcess' => '?',
            'App\\Controller\\LibraryController::showAllBooks' => '?',
            'App\\Controller\\LibraryController::showBookByIsbnProcess' => '?',
            'App\\Controller\\LibraryController::updateBook' => '?',
            'App\\Controller\\LibraryController::updateBookProcess' => '?',
            'App\\Kernel::loadRoutes' => '?',
            'App\\Kernel::registerContainerConfiguration' => '?',
            'App\\Kernel::terminate' => '?',
            'kernel::loadRoutes' => '?',
            'kernel::registerContainerConfiguration' => '?',
            'kernel::terminate' => '?',
            'App\\Controller\\LibraryController:createBookProcess' => '?',
            'App\\Controller\\LibraryController:deleteBookByIsbnProcess' => '?',
            'App\\Controller\\LibraryController:showAllBooks' => '?',
            'App\\Controller\\LibraryController:showBookByIsbnProcess' => '?',
            'App\\Controller\\LibraryController:updateBook' => '?',
            'App\\Controller\\LibraryController:updateBookProcess' => '?',
            'kernel:loadRoutes' => '?',
            'kernel:registerContainerConfiguration' => '?',
            'kernel:terminate' => '?',
        ]));
    }
}
